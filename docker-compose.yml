version: '3.5' 

services:

    ngsi-proxy:
        image: ngsi-proxy
        hostname: ngsi-proxy
        container_name: ngsi-proxy
        networks:
          default:
            ipv4_address: 172.18.1.14
        expose:
            - "8100"
        ports:
            - "8100:8100"
        environment:
            - PORT=8100
            - TRUST_PROXY_HEADERS=0

    postgres-db:
        image: postgres
        hostname: postgres-db
        container_name: db-postgres
        restart: always
        ports:
          - "5432:5432"
        networks:
          default:
            ipv4_address: 172.18.1.13
        environment:
            - POSTGRES_PASSWORD=wirepass   # Change this password!
        volumes:
            - postgres-db:/var/lib/postgresql/data



    elasticsearch:
        image: elasticsearch:2.4
        container_name: elasticsearch
        hostname: elasticsearch
        ports:
            - "9200:9200"
        networks:
          default:
            ipv4_address: 172.18.1.12

        restart: always
        volumes:
            - elasticsearch-data:/usr/share/elasticsearch/data
        command: elasticsearch -Des.index.max_result_window=50000

    memcached:
        image: memcached:1
        container_name: memcached
        hostname: memcached
        ports:
            - "11211:11211"
        networks:
          default:
            ipv4_address: 172.18.1.11

        restart: always
        command: memcached -m 2048m

    wirecloud:
        image: wirecloudx
        container_name: fiware-wirecloud
        hostname: wirecloud
        ports:
            - "8000:8000"
        networks:
          default:
            ipv4_address: 172.18.1.10

        restart: always
        depends_on:
            - keyrock
            - elasticsearch
            - memcached
            - postgres-db
        environment:
            - DEBUG=True
            - DEFAULT_THEME=wirecloud.defaulttheme
            - DB_HOST=postgres-db
            - DB_PASSWORD=wirepass   # Change this password!
            - FORWARDED_ALLOW_IPS=*
            - ELASTICSEARCH2_URL=http://elasticsearch:9200/
            - MEMCACHED_LOCATION=memcached:11211
            - FIWARE_IDM_URL=http://localhost:3005
            - FIWARE_IDM_SERVER=http://172.18.1.5:3005
            - SOCIAL_AUTH_FIWARE_KEY=wirecloud-dckr-site-0000-00000000000
            - SOCIAL_AUTH_FIWARE_SECRET=wirecloud-docker-000000-clientsecret
        volumes:
            - wirecloud-data:/opt/wirecloud_instance/data
            - wirecloud-static:/var/www/static
            - ./wirecloud-data/common-widgets:/opt/common-widgets
  
    keyrock:
        image: fiware/idm:7.5.1
        container_name: fiware-keyrock
        hostname: keyrock
        networks:
          default:
            ipv4_address: 172.18.1.5
        depends_on:
            - mysql-db
        ports:
            - "3005:3005"
            - "3443:3443"
        environment:
            - DEBUG=idm:*
            - DATABASE_HOST=mysql-db
            - IDM_DB_PASS_FILE=/run/secrets/my_secret_data
            - IDM_DB_USER=root
            - IDM_HOST=http://localhost:3005
            - IDM_PORT=3005
 #           - IDM_HTTPS_ENABLED=${IDM_HTTPS_ENABLED}
 #           - IDM_HTTPS_PORT=3443
            - IDM_ADMIN_USER=alice
            - IDM_ADMIN_EMAIL=alice-the-admin@test.com
            - IDM_ADMIN_PASS=test
        secrets:
            - my_secret_data
        healthcheck:
            test: curl --fail -s http://localhost:3005/version || exit 1


    mysql-db:
        restart: always
        image: mysql:5.7
        hostname: mysql-db
        container_name: db-mysql
        expose:
          - "3306"
        ports:
          - "3306:3306"
        networks:
          default:
            ipv4_address: 172.18.1.6
        environment:
          - "MYSQL_ROOT_PASSWORD_FILE=/run/secrets/my_secret_data"
          - "MYSQL_ROOT_HOST=172.18.1.5"
        volumes:
          - mysql-db:/var/lib/mysql
          - ./mysql-data:/docker-entrypoint-initdb.d/:ro
        secrets:
          - my_secret_data

    mongo-db:
        image: mongo:3.6
        hostname: mongo-db
        container_name: db-mongo
        ports:
          - "27017:27017"
        networks:
            default: ~
        command: --bind_ip_all --smallfiles
        volumes:
          - mongo-db:/data

    orion:
        image: fiware/orion:2.2.0
        container_name: fiware-orion
        depends_on:
          - mongo-db
        networks:
          - default
        expose:
          - "1026"
        ports:
          - "1026:1026"
        command: -dbhost mongo-db -logLevel DEBUG
        healthcheck:
          test: curl --fail -s http://orion:1026/version || exit 1

    iot-agent:
        image: fiware/iotagent-ul:1.8.0
        hostname: iot-agent
        container_name: fiware-iot-agent
        depends_on:
          - mongo-db
          - orion
        networks:
          - default
        ports:
          - "4041:4041"
          - "7896:7896"
        environment:
          - IOTA_CB_HOST=orion # name of the context broker to update context
          - IOTA_CB_PORT=1026 # port the context broker listens on to update context
          - IOTA_NORTH_PORT=4041
          - IOTA_REGISTRY_TYPE=mongodb #Whether to hold IoT device info in memory or in a database
          - IOTA_LOG_LEVEL=DEBUG # The log level of the IoT Agent
          - IOTA_TIMESTAMP=true # Supply timestamp information with each measurement
          - IOTA_CB_NGSI_VERSION=v2 # use NGSIv2 when sending updates for active attributes
          - IOTA_AUTOCAST=true # Ensure Ultralight number values are read as numbers not strings
          - IOTA_MONGO_HOST=mongo-db # The host name of MongoDB
          - IOTA_MONGO_PORT=27017 # The port mongoDB is listening on
          - IOTA_MONGO_DB=iotagentul # The name of the database used in mongoDB
          - IOTA_HTTP_PORT=7896 # The port used for device traffic over HTTP
          - IOTA_PROVIDER_URL=http://iot-agent:4041
        healthcheck:
          test: curl --fail -s http://iot-agent:4041/iot/about || exit 1

    tutorial:
        image: fiware/tutorials.context-provider
        hostname: tutorial
        container_name: fiware-tutorial
        depends_on:
          - orion
          - iot-agent
          - keyrock
        networks:
          default:
            ipv4_address: 172.18.1.7
            aliases:
              - iot-sensors
              - context-provider
        expose:
          - "3000"
          - "3001"
        ports:
          - "3000:3000"
          - "3001:3001"
        environment:
          - "DEBUG=tutorial:*"
          - "WEB_APP_PORT=3000" # Port used by the content provider proxy and web-app for viewing data
          - "IOTA_HTTP_HOST=iot-agent"
          - "IOTA_HTTP_PORT=7896"
          - "DUMMY_DEVICES_PORT=3001" # Port used by the dummy IOT devices to receive commands
          - "DUMMY_DEVICES_TRANSPORT=HTTP" # Default transport used by dummy Io devices
          - "DUMMY_DEVICES_API_KEY=4jggokgpepnvsb2uv4s40d59ov"
          - "CONTEXT_BROKER=http://orion:1026/v2" # URL of the context broker to update context
          - "OPENWEATHERMAP_KEY_ID=<ADD_YOUR_KEY_ID>"
          - "TWITTER_CONSUMER_KEY=<ADD_YOUR_CONSUMER_KEY>"
          - "TWITTER_CONSUMER_SECRET=<ADD_YOUR_CONSUMER_SECRET>"
          - "NGSI_LD_PREFIX="
          - "SECURE_ENDPOINTS=true"
          - "KEYROCK_URL=http://localhost"
          - "KEYROCK_IP_ADDRESS=http://172.18.1.5"
          - "KEYROCK_PORT=3005"
          - "KEYROCK_CLIENT_ID=tutorial-dckr-site-0000-xpresswebapp"
          - "KEYROCK_CLIENT_SECRET=tutorial-dckr-site-0000-clientsecret"
          - "CALLBACK_URL=http://localhost:3000/login"
        healthcheck:
          test: curl --fail -s http://tutorial:3000/version || exit 1


networks:
  default:
    ipam:
      config:
        - subnet: 172.18.1.0/24

volumes:
  mysql-db: ~
  postgres-db: ~
  elasticsearch-data: ~
  wirecloud-static: ~
  wirecloud-data: ~
  mongo-db: ~

secrets:
    my_secret_data:
        file: ./secrets.txt
